/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/reset.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_settings_reset {
            timeout-ms = <50>;
            key-positions = <0 11>; // ESC + BSPC keys
            bindings = <&sys_reset>;
            layers = <1>; // Only on lower layer
        };

        combo_bootloader {
            timeout-ms = <50>;
            key-positions = <10 11>; // 0 + BSPC keys (top right corner)
            bindings = <&bootloader>;
            layers = <1>; // Only on lower layer
        };

        Copy {
            bindings = <&kp RG(C)>;
            key-positions = <38 39>;
        };

        Paste {
            bindings = <&kp RG(P)>;
            key-positions = <39 40>;
        };

        ctrl-a {
            bindings = <&kp RG(A)>;
            key-positions = <25 26>;
        };
    };

    behaviors {
        mt_fast: mt_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_FAST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };

        homerow_mod: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };

        shiftsnapshot: shiftsnapshot {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTSNAPSHOT";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LS(RG(NUMBER_4))>;
        };
        
        leader: leader {
            compatible = "zmk,behavior-leader-key";
            #binding-cells = <0>;
            timeout-ms = <1000>;  // 1 second timeout for sequences
            
            // Bluetooth shortcuts
            bt0 {
                sequence = <B N0>;
                bindings = <&bt BT_SEL 0>;
            };
            bt1 {
                sequence = <B N1>;
                bindings = <&bt BT_SEL 1>;
            };
            bt2 {
                sequence = <B N2>;
                bindings = <&bt BT_SEL 2>;
            };
            bt3 {
                sequence = <B N3>;
                bindings = <&bt BT_SEL 3>;
            };
            bt4 {
                sequence = <B N4>;
                bindings = <&bt BT_SEL 4>;
            };
            btc {
                sequence = <B C>;
                bindings = <&bt BT_CLR>;
            };
            
            // System shortcuts
            boot {
                sequence = <B O O T>;
                bindings = <&bootloader>;
            };
            reset {
                sequence = <R S T>;
                bindings = <&sys_reset>;
            };
            
            // Output mode shortcuts
            usb {
                sequence = <U S B>;
                bindings = <&out OUT_USB>;
            };
            ble {
                sequence = <B L E>;
                bindings = <&out OUT_BLE>;
            };
            
            // Application shortcuts (examples)
            term {
                sequence = <T E R M>;
                bindings = <&kp LG(SPACE)>;  // Cmd+Space for Spotlight/Alfred
            };
            lock {
                sequence = <L O C K>;
                bindings = <&kp LC(LG(Q))>;  // Ctrl+Cmd+Q for lock screen on macOS
            };
        };
    };

    macros {
        p: p {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp N3 &kp N0 &kp N5 &kp N4 &kp N6 &kp ENTER>;
            label = "P";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  | BSPC |
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  \   |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //        | ALT | CTL | GUI | LWR | SPC |   | ENT | RSE  | BSPC| DEL | ALT |

            bindings = <
&kp ESC         &kp N1                &kp N2                 &kp N3                &kp N4                &kp N5     &kp N6                     &kp N7                      &kp N8     &kp N9   &kp N0    &kp BSPC
&kp TAB         &kp Q                 &kp W                  &kp E                 &kp R                 &kp T      &kp Y                      &kp U                       &kp I      &kp O    &kp P     &kp BACKSPACE
&kp LA(LCTRL)   &homerow_mod RG(A) A  &lt 3 S                &lt 2 D               &lt 1 F               &kp G      &kp H                      &lt 1 J                     &lt 2 K    &lt 3 L  &kp SEMI  &kp SQT
&shiftsnapshot  &kp Z                 &homerow_mod RG(X) X   &homerow_mod RG(C) C  &homerow_mod RG(V) V  &kp B      &kp N                      &kp M                       &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                &kp TAB               &mt_fast LSHIFT ENTER  &kp LGUI              &mo 1                 &kp SPACE  &mt_fast RIGHT_GUI ESCAPE  &mt_fast RIGHT_SHIFT SPACE  &kp SPACE  &kp DEL  &leader
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  `   |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11  |
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | F12  |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT | LBKT| GRAVE|
            // | SHFT |     |     | PREV| NEXT| PLAY|   | HOME| END | PGUP| PGDN| BSLH|      |
            //        | ALT | CTL | GUI |     | SPC |   | ENT |     | BSPC| DEL | ALT |

            bindings = <
&kp GRAVE   &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6    &kp F7    &kp F8       &kp F9         &kp F10   &kp F11
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5        &kp N6    &kp N7    &kp N8       &kp N9         &kp N0    &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp LEFT  &kp DOWN  &kp UP       &kp RIGHT      &kp LBKT  &kp GRAVE
&kp LSHFT   &trans        &trans        &kp C_PREV    &kp C_NEXT    &kp C_PP      &kp HOME  &kp END   &kp PAGE_UP  &kp PAGE_DOWN  &kp BSLH  &trans
            &kp LALT      &kp LCTRL     &kp LGUI      &trans        &kp SPACE     &kp RET   &trans    &kp BSPC     &kp DEL        &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  ~   |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // |  TAB |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |     |      |
            // | CTRL |     |     |     |     |     |   |  _  |  +  |  {  |  }  |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     | DIV |      |
            //        | ALT | CTL | GUI |     | SPC |   | ENT |     | BSPC| DEL | ALT |

            bindings = <
&kp TILDE  &kp EXCL         &kp AT       &kp HASH  &kp DLLR    &kp PRCNT    &kp CARET       &kp AMPS       &kp ASTRK         &kp LPAR              &kp RPAR               &kp BSPC
&kp TAB    &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&kp LCTRL  &trans           &trans       &trans    &trans      &trans       &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp TILDE              &kp GRAVE
&kp LSHFT  &trans           &trans       &trans    &trans      &trans       &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp KP_DIVIDE          &trans
           &kp LCTRL        &kp LGUI     &trans    &kp SPACE   &trans       &trans          &kp BSPC       &kp DEL           &kp RALT              &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        c1 {
            if-layers = <0 2>;
            then-layer = <3>;
        };
    };
};